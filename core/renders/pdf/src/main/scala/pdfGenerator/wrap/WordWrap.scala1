package core.wrap

import java.util.StringTokenizer

import core.fonts.afm.FontUtil.{PdfCharSet, PdfFont}
import core.fonts.afm._

import scala.collection.mutable.ListBuffer

object WordWrap {
  final val spaceWidth = 1

  def wrap(text: String, lineWidth: Int): List[String] = {
    val result = ListBuffer[String]()
    val tokenizer = new StringTokenizer(text)
    var spaceLeft = lineWidth
    val currentLine = new StringBuilder();
    while (tokenizer.hasMoreTokens) {
      var word: String = tokenizer.nextToken
      if ((getStringWidth(word) + spaceWidth) > spaceLeft) {
        if (getStringWidth(currentLine.toString) > 0) {
          result += currentLine.toString
          currentLine.clear
        }
        if (getStringWidth(word) > lineWidth) {
          val wordList = word.grouped(lineWidth).toList
          for (i <- 0 until wordList.length - 1) {
            result += wordList(i)
          }
          word = wordList.last
        }
        currentLine.append(word + " ")
        spaceLeft = lineWidth - getStringWidth(word)
      } else {
        currentLine.append(word + " ")
        spaceLeft -= (getStringWidth(word) + spaceWidth)
      }
    }
    if (getStringWidth(currentLine.toString) > 0) {
      result += currentLine.toString
      currentLine.clear
    }
    result.toList
  }

  def getStringWidth(str: String): Int = {
    str.length
  }


  def wrap1(pdfFont: PdfFont, text: String, lineWidth: Double): List[String] = {
    val charSet = pdfFont.charSet(0)
    val fontSize = pdfFont.fontSize
    val result = ListBuffer[String]()
    val tokenizer = new StringTokenizer(text)
    var spaceLeft = lineWidth
    val currentLine = new StringBuilder()
    while (tokenizer.hasMoreTokens) {
      var word: String = tokenizer.nextToken
      if ((getStringWidth(fontSize, charSet, word) + spaceWidth) > spaceLeft) {
        if (getStringWidth(fontSize, charSet, currentLine.toString) > 0) {
          result += currentLine.toString
          currentLine.clear
        }
        //        if (getStringWidth(charSet, word) > lineWidth) {
        //          val wordList = word.grouped(lineWidth).toList
        //          for (i <- 0 until wordList.length - 1) {
        //            result += wordList(i)
        //          }
        //          word = wordList.last
        //        }
        currentLine.append(word + " ")
        spaceLeft = lineWidth - getStringWidth(fontSize, charSet, word)
      } else {
        currentLine.append(word + " ")
        spaceLeft -= (getStringWidth(fontSize, charSet, word) + spaceWidth)
      }
    }
    if (getStringWidth(fontSize, charSet, currentLine.toString) > 0) {
      result += currentLine.toString
      currentLine.clear
    }
    result.toList
  }


  def getStringWidth(fontSize: Int, charSet: PdfCharSet, str: String) = str.map(char => charSet.charList(char) * 0.001 /72*2.54* fontSize).sum


  def main(args: Array[String]) {
    val fontSize=10
    val str = "Catelus cu parul cret fura rata din cotet el se jura ca nu fura dar l-am prins cu rata in gura."
    val pdfFont = FontUtil.getFont("Helvetica", fontSize)
    val result = wrap1(pdfFont, str, 10)
    println(result.mkString("\n"))
  }
}